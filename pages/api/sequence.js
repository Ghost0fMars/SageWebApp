// ‚úÖ pages/api/sequence.js
import { getServerSession } from "next-auth/next";
import { authOptions } from "./auth/[...nextauth]";
import prisma from "@/lib/prisma";

export default async function handler(req, res) {
  // V√©rifier la session utilisateur
  const session = await getServerSession(req, res, authOptions);
  if (!session) {
    return res.status(401).json({ message: "Unauthorized" });
  }

  const userId = session.user.id;

  if (req.method === "POST") {
    const { title, content } = req.body;

    if (!title || !content) {
      return res.status(400).json({ message: "Title et content requis" });
    }

    // ‚úÖ Cr√©er ou mettre √† jour la s√©quence pour cet utilisateur
    const sequence = await prisma.sequence.upsert({
      where: { title },
      update: { content, userId },
      create: { title, content, userId },
    });

    // ‚úÖ Supprimer toutes les Seances existantes pour cette s√©quence
    await prisma.seance.deleteMany({
      where: { sequenceId: sequence.id },
    });

    // ‚úÖ D√©couper et cr√©er les nouvelles Seances
    const text = content.seancesDetaillees || "";
    const seanceBlocks = text.split(/S√©ance \d+ :/i).filter(Boolean);

    for (let i = 0; i < seanceBlocks.length; i++) {
      const s = seanceBlocks[i];
      const lines = s.split("\n").map(l => l.trim()).filter(Boolean);
      const seanceTitle = `S√©ance ${i + 1}`;
      const objectif = lines.find(line => /Objectif/i.test(line)) || "Objectif non pr√©cis√©";

      await prisma.seance.create({
        data: {
          title: seanceTitle,
          objectif,
          sequenceId: sequence.id,
          userId: userId, // üëà important pour filtrer les s√©ances par utilisateur
        },
      });
    }

    return res.status(200).json({
      message: "S√©quence ET s√©ances sauvegard√©es avec succ√®s",
      sequence,
    });
  }

  res.setHeader("Allow", ["POST"]);
  res.status(405).end(`M√©thode ${req.method} non autoris√©e`);
}
